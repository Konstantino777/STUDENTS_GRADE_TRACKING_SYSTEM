package com.productstar.students.src.main.java.org.example.students;

import java.util.Objects;

public final class Score {
    private final String name;
    private final String subject;
    private final int score;

    public Score(String name, String subject, int score) {
        this.name = name;
        this.subject = subject;
        this.score = score;
    }

    public String name() {
        return name;
    }

    public String subject() {
        return subject;
    }

    public int score() {
        return score;
    }

    @Override
    public boolean equals(Object obj) {
        if (obj == this) return true;
        if (obj == null || obj.getClass() != this.getClass()) return false;
        var that = (Score) obj;
        return Objects.equals(this.name, that.name) &&
                Objects.equals(this.subject, that.subject) &&
                this.score == that.score;
    }

    @Override
    public int hashCode() {
        return Objects.hash(name, subject, score);
    }

    @Override
    public String toString() {
        return "Score[" +
                "name=" + name + ", " +
                "subject=" + subject + ", " +
                "score=" + score + ']';
    }

}

package com.productstar.students.src.main.java.org.example.students;

import java.util.Collection;
import java.util.Set;

public interface Examination {

    void addScore(Score score);

    Score getScore(String name, String subject);

    double getAverageForSubject(String subject);

    Set<String> multipleSubmissionsStudentNames();

    Set<String> lastFiveStudentsWithExcellentMarkOnAnySubject();

    Collection<Score> getAllScores();
}

package com.productstar.students.src.main.java.org.example.students;

import java.util.*;
import java.util.concurrent.ConcurrentHashMap;
import java.util.stream.Collectors;

public class ExaminationImpl implements Examination {

    
    private final Map<StudentSubjectKey, Score> scores = new HashMap<>();

    private final Map<String, Double> averageScoreCache = new ConcurrentHashMap<>();

    private final Deque<StudentTimestamp> excellentScores = new LinkedList<>();

    
    @Override
    public void addScore(Score score) {
        StudentSubjectKey key = new StudentSubjectKey(score.name(), score.subject());

        scores.put(key, score);

        averageScoreCache.clear();

        if (score.score() >= 90) {
            excellentScores.addFirst(new StudentTimestamp(score.name(), System.currentTimeMillis()));

            // Ограничиваем размер списка до 5 элементов
            if (excellentScores.size() > 5) {
                excellentScores.removeLast();
            }
        }
    }

    
    @Override
    public Score getScore(String name, String subject) {
        return scores.get(new StudentSubjectKey(name, subject));
    }

    
    @Override
    public double getAverageForSubject(String subject) {
        // Проверяем кэш
        if (averageScoreCache.containsKey(subject)) {
            return averageScoreCache.get(subject);
        }

        return calculateAndCacheAverage(subject);
    }

    
    private double calculateAndCacheAverage(String subject) {
        double avg = scores.values().stream()
                .filter(score -> score.subject().equals(subject))
                .mapToInt(Score::score)
                .average()
                .orElse(0.0);

        averageScoreCache.put(subject, avg);
        return avg;
    }

    
    @Override
    public Set<String> multipleSubmissionsStudentNames() {
        Map<String, Integer> submissionCount = new HashMap<>();

        for (StudentSubjectKey key : scores.keySet()) {
            String studentName = key.getName();
            submissionCount.put(studentName, submissionCount.getOrDefault(studentName, 0) + 1);
        }

        return submissionCount.entrySet().stream()
                .filter(entry -> entry.getValue() > 1)
                .map(Map.Entry::getKey)
                .collect(Collectors.toSet());
    }

    

    @Override
    public Set<String> lastFiveStudentsWithExcellentMarkOnAnySubject() {
        return excellentScores.stream()
                .map(StudentTimestamp::getName)
                .limit(10) // Берём чуть больше, чтобы хватило после distinct
                .distinct()
                .limit(5)
                .collect(Collectors.toCollection(LinkedHashSet::new)); // Сохраняем порядок
    }

    
    @Override
    public Collection<Score> getAllScores() {
        return Collections.unmodifiableCollection(scores.values());
    }

    
    private static class StudentSubjectKey {
        private final String name;
        private final String subject;

        public StudentSubjectKey(String name, String subject) {
            this.name = name;
            this.subject = subject;
        }

        public String getName() {
            return name;
        }

        public String getSubject() {
            return subject;
        }

        @Override
        public boolean equals(Object o) {
            if (this == o) return true;
            if (o == null || getClass() != o.getClass()) return false;
            StudentSubjectKey that = (StudentSubjectKey) o;
            return Objects.equals(name, that.name) && Objects.equals(subject, that.subject);
        }

        @Override
        public int hashCode() {
            return Objects.hash(name, subject);
        }
    }

    
    private static class StudentTimestamp {
        private final String name;
        private final long timestamp;

        public StudentTimestamp(String name, long timestamp) {
            this.name = name;
            this.timestamp = timestamp;
        }

        public String getName() {
            return name;
        }

        public long getTimestamp() {
            return timestamp;
        }
    }
}

package com.productstar.students.src.main.java.org.example.students;
import org.junit.Before;
import org.junit.Test;

import java.util.Arrays;
import java.util.Collection;
import java.util.List;
import java.util.Set;
import java.util.concurrent.ConcurrentHashMap;

import static org.junit.Assert.*;


public class ExaminationTest {

    private Examination examination;

    @Before
    public void setUp() {
        examination = new ExaminationImpl();
    }

    @Test
    public void testAddAndGetScore() {
        Score score = new Score("Иван", "Математика", 85);
        examination.addScore(score);

        Score result = examination.getScore("Иван", "Математика");
        assertNotNull(result);
        assertEquals("Иван", result.name());
        assertEquals("Математика", result.subject());
        assertEquals(85, result.score());
    }

    @Test
    public void testUpdateScore() {
        examination.addScore(new Score("Петр", "Физика", 70));
        examination.addScore(new Score("Петр", "Физика", 90));

        Score result = examination.getScore("Петр", "Физика");
        assertNotNull(result);
        assertEquals(90, result.score());
    }

    @Test
    public void testGetAverageForSubject() {
        examination.addScore(new Score("Алексей", "Математика", 80));
        examination.addScore(new Score("Елена", "Математика", 90));
        examination.addScore(new Score("Олег", "Математика", 70));

        double avg = examination.getAverageForSubject("Математика");
        assertEquals(80.0, avg, 0.01);
    }

    @Test
    public void testMultipleSubmissionsStudentNames() {
        examination.addScore(new Score("Анна", "Биология", 80));
        examination.addScore(new Score("Анна", "Химия", 75));
        examination.addScore(new Score("Дмитрий", "Физика", 90));

        Set<String> multiple = examination.multipleSubmissionsStudentNames();

        assertTrue(multiple.contains("Анна"));
        assertFalse(multiple.contains("Дмитрий"));
    }

    @Test
    public void testLastFiveStudentsWithExcellentMarkOnAnySubject() throws InterruptedException {
        examination.addScore(new Score("Алексей", "Математика", 95));
        Thread.sleep(10);
        examination.addScore(new Score("Елена", "Физика", 92));
        Thread.sleep(10);
        examination.addScore(new Score("Иван", "Химия", 91));
        Thread.sleep(10);
        examination.addScore(new Score("Ольга", "История", 93));
        Thread.sleep(10);
        examination.addScore(new Score("Пётр", "Литература", 94));
        Thread.sleep(10);
        examination.addScore(new Score("Светлана", "Математика", 96));

        List<String> topFive = examination.lastFiveStudentsWithExcellentMarkOnAnySubject().stream()
                .toList();

        assertEquals(5, topFive.size());

        // Проверяем точный порядок (если важен)
        assertEquals(List.of("Светлана", "Пётр", "Ольга", "Иван", "Елена"), topFive);
    }

    @Test
    public void testGetAllScores() {
        examination.addScore(new Score("Алексей", "Математика", 85));
        examination.addScore(new Score("Елена", "Физика", 90));

        Collection<Score> allScores = examination.getAllScores();
        assertEquals(2, allScores.size());

        Set<String> subjects = new java.util.HashSet<>();
        for (Score score : allScores) {
            subjects.add(score.subject());
        }
        assertTrue(subjects.contains("Математика"));
        assertTrue(subjects.contains("Физика"));
    }

}
